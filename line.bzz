include "include/vec2.bzz"
include "include/string.bzz"
#################################################
### UTILITY FUNCTIONS ###########################
#################################################

# Write a table as if it was a matrix
function write_knowledge(k, row, col, val) {
    var key = string.concat(string.tostring(row),"-",string.tostring(col))
    k[key] = val
}

# Read a table as if it was a matrix
function read_knowledge(k, row, col) {
    var key = string.concat(string.tostring(row),"-",string.tostring(col))
    if (k[key] == nil) {
        # log("Warning: reading 'nil' value from the knowledge table, returning -1")
        return -1
    } else {
        return k[key]
    }
}

#################################################
### MOVEMENT/COMMUNICATION PRIMITIVES ###########
#################################################

# Lennard-Jones parameters
TARGET     = 100.0 # The equilibrium distance, in cm
EPSILON    = 150.0
# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
  return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}
# Neighbor data to LJ interaction vector
function lj_vector(rid, data) {
  return math.vec2.newp(lj_magnitude(data.distance, TARGET, EPSILON), data.azimuth)
}
# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
  return math.vec2.add(data, accum)
}

# Calculates and actuates the flocking interaction
function hexagon() {
  # Calculate accumulator
  debug("hex")
  var accum = neighbors.map(lj_vector).reduce(lj_sum, math.vec2.new(0.0, 0.0))
  if(neighbors.count() > 0)
    math.vec2.scale(accum, 1.0 / neighbors.count())
  # Move according to vector
  goto(accum.x, accum.y)
}

function inform_your_neighborhood() {    
    # Reset to 0 the visibility of all neighbors
    foreach(knowledge, function(key, value) {
		column = string.sub(key, string.length(key)-1,string.length(key))
		if (column=='3') { 
			knowledge[key] = 0 
		}     
    })    
    neighbors.foreach( function(rid, data) {               
		# For each neighbor, send a message with its azimuth, as seen by the broadcasting robot
		message_id = string.tostring(rid)
		neighbors.broadcast(message_id, rtod(data.azimuth))        
		# Record the neighbor azimuth in my own knowledge table
		write_knowledge(knowledge, rid, 0, rtod(data.azimuth))        
		# Record the neighbor distance in my own knowledge table
		write_knowledge(knowledge, rid, 2, data.distance)        
		# Set neighbor as visible
		write_knowledge(knowledge, rid, 3, 1)     
    })    
    # Send a message with the desired direction, as seen by the broadcasting robot
    neighbors.broadcast("direction", local_dir)
    
}

function listen_to_your_neighborhood() {    
    # For all "senders" in my neighborhood, record my azimuth, as seen by them
    message_id = string.tostring(id)
    neighbors.listen(message_id, function(vid, value, rid) {
        write_knowledge(knowledge, rid, 1, value)
    })
}

# Rads to degrees
function rtod(r) {
   return (r*(180.0/math.pi))
}

# Degrees to rads
function dtor(d) {
   return (math.pi*(d/180.0))
}

# Force angles in the (-180,180) interval
function degrees_interval(a) {
    var temp = a
    while ((temp>360.0) or (temp<0.0)) {
        if (temp > 360.0) {
            temp = temp - 360.0
        } else if (temp < 0.0){
            temp = temp + 360.0
        }
    }
    if (temp > 180.0) {
        temp = temp - 360.0
    }
    return temp
}

########################################
#
# BARRIER-RELATED FUNCTIONS
#
########################################


# Constants
BARRIER_VSTIG = 101
ROBOTS = 9

# Sets a barrier
function barrier_set(threshold, transf) {
  statef = function() {
    barrier_wait(threshold, transf)
  } 
}

# Make yourself ready
function barrier_ready() {
  barrier.put(id, 1)
}

# Executes the barrier
function barrier_wait(threshold, transf) {
  debug("barrier wait: ", barrier.size())
  inform_your_neighborhood()
  barrier.get(id) 
  if(barrier.size() >= threshold) {
    barrier = nil
    barrier = stigmergy.create(BARRIER_VSTIG)
    t = string.split(vs.get("d"),",")
    transf()
  }
}

function rotate() {
	statef = transition_hex
}

function transition_hex() {
	inform_your_neighborhood()
	foreach(t, function(key, value){
			if(t[key] == id) {
				previous = stoi(t[key-1])
				interval = degrees_interval(read_knowledge(knowledge, previous, 0) - 90)
				debug(read_knowledge(knowledge, previous, 0))
				if (interval<5 and interval>(-5)) {
					goto(0.0,0.0)
					debug("aligned")
				}
				else {
		
					x_mov = math.cos(60)
				 	y_mov = math.sin(60)
				 	goto(x_mov,y_mov)
				}
			}
		})
}

function alignNearestBot(bot, angle) {
    log("align nearest bot :",id)
	arm_offset = degrees_interval(read_knowledge(knowledge, bot, 1) - angle)
      
	if (arm_offset<1 and arm_offset>(-1)) {
		next_angle = degrees_interval(read_knowledge(knowledge, bot, 0) + 180)
		goto(0.0,0.0)
		vs.put("a", id)
		vs.put("b", next_angle)
		write_knowledge(knowledge, id, 4, 1)

		posit = vs.get("d")
		posit = string.concat(posit,",")
		posit = string.concat(posit,string.tostring(id))
		vs.put("d", posit)

		barrier_set(ROBOTS, rotate)
		barrier_ready()
	} 
else {      	 
          if (read_knowledge(knowledge, bot, 2) > 150.0) { 
              x_mov = math.cos(dtor(read_knowledge(knowledge, bot, 0)))
              y_mov = math.sin(dtor(read_knowledge(knowledge, bot, 0)))       
          } else if (read_knowledge(knowledge, bot, 2) < 30.0) {
              x_mov = -math.cos(dtor(read_knowledge(knowledge, bot, 0)))
              y_mov = -math.sin(dtor(read_knowledge(knowledge, bot, 0)))              
          } else {
              spiraling = 2.0+(id/10.0) # Fun stuff but be careful with this, it affects how a robots turns around a central node, use random number generation, eventually
              if (arm_offset > 0) { # Clockwise

                  x_mov = -math.sin(dtor(read_knowledge(knowledge, bot, 0)))
                  y_mov = math.cos(dtor(read_knowledge(knowledge, bot, 0))) * spiraling
              } else { # Counterclockwise
                  x_mov = math.sin(dtor(read_knowledge(knowledge, bot, 0)))
                  y_mov = -math.cos(dtor(read_knowledge(knowledge, bot, 0))) * spiraling
              }
          }
          speed = 100
          goto(speed * x_mov,speed * y_mov)
      }
}

function zero() {   
  # Do not move
  goto(0.0,0.0) 
  inform_your_neighborhood()       
}


function lineUp() {
  # Broadcast information
  inform_your_neighborhood()
  if(read_knowledge(knowledge,id,4) != 1) {
  	alignNearestBot(vs.get("a"), vs.get("b")) 
  }         
}

#################################################
### BUZZ FUNCTIONS ##############################
#################################################

# Executed at init time
function init() { 
  s0 = swarm.create(0)
  s1 = swarm.create(1)
  s0.select( id == 0 )
  s1 = s0.others(133)

  # Local Tables
  knowledge = {}
  t ={}
  
  # Virtual Stigmergy
  vs = stigmergy.create(2)
  barrier = stigmergy.create(BARRIER_VSTIG)
  
  iden = 0
  vs_value = 0
  angle = 90
  posit = "0"
  
  vs.put("a", vs_value) # ID for the next bot to follow
  vs.put("b", angle)   # Angle for the next bot to follow
  vs.put("d", posit) # Vstig for the position of the robot
  
  # Update local knowledge with information from the neighbors
  listen_to_your_neighborhood()

  # Variables initialization
  statef = lineUp
}

# Executed every time step
function step() {
  s0.exec(zero)
  s1.exec(statef)
}

# Executed once when the robot (or the simulator) is reset.
function reset() {
}
# Execute at exit
function destroy() {
}
